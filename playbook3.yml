---                                              # Всегда документ формата .yml начинается с этих символов  
- name: Install Apache and Upload my web serve r # Название для всего playbook, как и что он будет делать
  hosts: all                                     # Включение всех серверов для проигрывания playbook (можно указать отдельные или группы)
  become: yes                                    # Включение прав суперпользователя для запуска (по умолчанию отключен)

# roles:                                         # Запускает роли для активации в этом playbook
   #- deploy_apache_web                          # Список ролей, которые задействованы и будут запускаться в этом playbook

  vars:                                          # Блок с указанием переменных, которые задаются изначально для всего playbook
    source_file:  ./MyWeb/index.html             # Переменная с указанием файла
    destin_file:  /var/www/html                  # Переменная с указанием адреса
    source_folder: ./myweb2                      # Переменная с указанием директории
    destin_folder: /var/www/html                 # Переменная с указанием адреса
    mytext: "Privet"                             # Переменная с указание текста

  tasks:                                         # Собственно задания, которые будут последовательно выполняться здесь

    - name: Use Import and Ping                  # Название отдельной задачи для простоты поиска и понимания происходящего
      include: playbook1.yml                     # Указывает playbook, который запускается в этом месте, а после его завершения, возвращается сюда

    - include: playbook1.yml mytext="Hallo"      # Более простой способ интеграции задач из другого плейбука

    - name: Print Hi                             # Название отдельной задачи для простоты поиска и понимания происходящего
      debug: msg="Hallo everyone"                # Для вывода на Терминал любых значений - в данном случае печать текста в кавычках

    - name: Print Hi with Loop                   # Название отдельной задачи для простоты поиска и понимания происходящего
      debug: msg="Hallo to {{ item }} "          # Вывод на терминал текста с переменным циклическим значением
      loop:                                      # Зацикливание для новых версий Ansible от 2.5 и старше
#     with_item:                                 # Зацикливание для старой версии Ansible 2.4, но и в новых работает
          - "Vasya"                              # Перечисление переменных, которые необходимо зациклить
          - "Petya"
          - "Kolya"

    - name: Loot with Until                      # Название отдельной задачи для простоты поиска и понимания происходящего
      shell: echo -n Z >> index.html && cat index.html  # запускает на серверах серию из трех команд: вывод Z, запись ее в файл, вывод на терминал содержимого файла
      register: output                           # создает новую переменную и добавляет данные в новую переменную
      delay: 2                                   # задает задержку в секундах между повторениями
      retries: 10                                # задает максимальное число повторений, даже при невыполнении условия "пока"
      until: output.stdout.find("ZZZZ") == false # Задает цикл "пока" определенное значение выполняется

    - name: Install many packages                # Название отдельной задачи для простоты поиска и понимания происходящего
      yum: name={{ item }} state=installed       # Устанавливает все выбранные пакеты на указанные сервера
      with_items:                                # Задает перечень устанавливаемых пакетов списком и повторяет с ними действие
            - python                             # Список предметов для установки
            - mysql-client
            - tree

    - name: Find and Print Linux Version         # Название отдельной задачи для простоты поиска и понимания происходящего
      debug: var=ansible_os_family               # Для вывода на Терминал любых значений - в данном случае печать переменной

    - name: Install Apache Web Server for RedHat # Название отдельной задачи для простоты поиска и понимания происходящего
      yum: name=httpd state=latest               # установка при помощи команды yum сервера Apache
      when: ansible_os_family == "RedHat"        # указание условия для срабатывания данного задания, здесь переменная должна быть указанной

    - name: Install Apach Web Server for Debian  # Название отдельной задачи для простоты поиска и понимания происходящего
      apt: name=apache2 state=latest             # установка при помощи команды apt сервера Apache
      when: ansible_os_family != "RedHat"        # указание условия для срабатывания данного задания, здесь переменная не должна быть указанного значения

    - name: Copy MyWeb to Servers                # Название отдельной задачи для простоты поиска и понимания происходящего
      copy: src={{ source_file }} dest={{ destin_file }} mode=0555  # Копирует указанный в переменной ресурс (src) в указанную папку (dest) с указанными правами (mode), в данном случае конкретный файл
      notify: Restart Apache RedHat              # срабатывание условного задания, которое прописывается ниже в handlers

    - name: Copy MyWeb to Servers with Item      # Название отдельной задачи для простоты поиска и понимания происходящего
      copy: src={{ source_folder }}/{{ item }} dest={{ destin_folder }} mode=0555  # Копирует указанный в переменной ресурс (src) в указанную папку (dest) с указанными правами (mode). В данном случае копирует по отдельности файлы, входящие в указанную папку
      loop:
        - "index.html"                           # Указывает список переменных, которые задействуются в задании
      notify:                                    # срабатывание условного задания, которое прописывается ниже в handlers
        - Restart Apache RedHat                  # перечисление handlers, которые должны сработать
        - Restart Apache Debian

    - name: Generate MyWeb to Servers            # Название отдельной задачи для простоты поиска и понимания происходящего, задача на генерацию файла .html из файла .j2
      template: src={{ source_folder }}/index.j2 dest={{ destin_folder }}/index.html mode=0555  #  Генерирует указанный в переменной ресурс (src) из указанного в указанную папку (dest) с указанными правами (mode). В данном случае позволяет создать файл .html из файла .j2 с сохранением всех правок. Команда подставляет новые значения переменной. 
      notify:                                    # срабатывание условного задания, которое прописывается ниже в handlers
        - Restart Apache RedHat                  # перечисление handlers, которые должны сработать
        - Restart Apache Debian

    - name: Copy MyWeb to Servers with Fileglob  # Название отдельной задачи для простоты поиска и понимания происходящего, копирование всего в переменной
      copy: src={{ item }} dest={{ destin_folder }} mode=0555  # Копирует указанный в переменной ресурс (src) в указанную папку (dest) с указанными правами (mode). В данном случае копирует по отдельности файлы, входящие в указанную папку
      with_fileglob: "{{ source_folder }}/*.*"   # Указывает массив всех файлов в заданной папке
      notify:                                    # срабатывание условного задания, которое прописывается ниже в handlers
        - Restart Apache RedHat                  # перечисление handlers, которые должны сработать
        - Restart Apache Debian

    - name: Sart WebServer for RedHat            # Название отдельной задачи для простоты поиска и понимания происходящего
      service: name=httpd state=started enabled=yes   # Запуск сервера
      when: ansible_os_family == "RedHat"        # указание условия для срабатывания данного задания, здесь переменная должна быть указанной

    - block:   Debian                            # Сбор заданий в один блок, которому можно придать одинаковые условия

      - name: Sart WebServer for Debian          # Название отдельной задачи для простоты поиска и понимания происходящего
        service: name=apache2 state=started enabled=yes # Запуск сервера

      - name: Copy MyWeb to Servers              # Название отдельной задачи для простоты поиска и понимания происходящего
        copy: src={{ source_file }} dest={{destin_file }} mode=0555  # Копирует указанный в переменной ресурс (src) в указанную папку (dest) с указанными правами (mode)
        notify: Restart Apache Debian            # срабатывание условного задания, которое прописывается ниже в handle

      - name: Install Apach Web Server for Debian # Название отдельной задачи для простоты поиска и понимания происходящего
        apt: name=apache2 state=latest           # установка при помощи команды apt сервера Apache

    when: ansible_os_family == "Debian"          # указание условия для срабатывания данного блока заданий, здесь переменная должна быть указанной. Условие может быть вынесено отдельно

    - name: Create folder                        # Название отдельной задачи для простоты поиска и понимания происходящего
      file:                                      # команда создания директории
        path: /home/artemkuzin/TestAnsible/secret # путь и название директории
        state: directory                         # назначение типа файла - директория
        mode: 0755                               # права для создаваемой папки

    - name: Create file                          # Название отдельной задачи для простоты поиска и понимания происходящего
      copy:                                      # Создает файлы, если файл существует - указывает новый текст в нем
        dest: /home/artemkuzin/TestAnsible/secret/secretfile.txt # Определение места хранения файла и его названия
        content:                                 # Переменная для записи контента, нужного в файле
          Lin1, in file1                         # Сам текст для внесения в файл
          Lin2, in file1
          Lin3, {{ mytext }}                     # В текст вписывается переменная из var в этом playbook


  handlers:                                      # Блок с условными заданиями, которые срабатывают только в определенный момент
    - name: Restart Apache RedHat                # название задания
      service: name=httpd state=restarted        # рестарт сервера Apache
      when: ansible_os_family == "RedHat"        # указание условия для срабатывания данного блока заданий, здесь переменная должна быть указанной

    - name: Restart Apache Debian                # название задания
      service: name=apache2 state=restarted      # рестарт сервера Apache
      when: ansible_os_family == "Debian"        # указание условия для срабатывания данного блока заданий, здесь переменная должна быть указанной
